//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-34097967
// Cuda compilation tools, release 12.4, V12.4.131
// Based on NVVM 7.0.1
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	_Z10tma_kernelILi32ELi32EiEv14CUtensorMap_stii
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.global .align 1 .b8 __unnamed_1[107] = {118, 111, 105, 100, 32, 116, 109, 97, 95, 107, 101, 114, 110, 101, 108, 40, 67, 85, 116, 101, 110, 115, 111, 114, 77, 97, 112, 95, 115, 116, 44, 32, 105, 110, 116, 44, 32, 105, 110, 116, 41, 32, 91, 119, 105, 116, 104, 32, 105, 110, 116, 32, 83, 77, 69, 77, 95, 72, 69, 73, 71, 72, 84, 32, 61, 32, 51, 50, 59, 32, 105, 110, 116, 32, 83, 77, 69, 77, 95, 87, 73, 68, 84, 72, 32, 61, 32, 51, 50, 59, 32, 68, 97, 116, 97, 84, 121, 112, 101, 32, 61, 32, 105, 110, 116, 93};
// _ZZ10tma_kernelILi32ELi32EiEv14CUtensorMap_stiiE11smem_buffer has been demoted
// _ZZ10tma_kernelILi32ELi32EiEv14CUtensorMap_stiiE3bar has been demoted
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std3__45__cpo5beginE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std3__45__cpo3endE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std3__45__cpo6cbeginE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std3__45__cpo4cendE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std3__45__cpo6rbeginE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std3__45__cpo4rendE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std3__45__cpo7crbeginE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std3__45__cpo5crendE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std3__440_GLOBAL__N__0e0ed5f5_8_main2_cu_63e784576ignoreE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std3__48in_placeE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std3__47nulloptE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std3__420unreachable_sentinelE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std6ranges3__45__cpo4swapE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std6ranges3__45__cpo9iter_moveE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std6ranges3__45__cpo7advanceE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std6ranges3__45__cpo5beginE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std6ranges3__45__cpo3endE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std6ranges3__45__cpo6cbeginE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std6ranges3__45__cpo4cendE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std6ranges3__45__cpo9iter_swapE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std6ranges3__45__cpo4nextE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std6ranges3__45__cpo4prevE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std6ranges3__45__cpo4dataE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std6ranges3__45__cpo5cdataE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std6ranges3__45__cpo4sizeE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std6ranges3__45__cpo5ssizeE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784574cuda3std6ranges3__45__cpo8distanceE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784576thrust20THRUST_200601_900_NS8cuda_cub3parE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784576thrust20THRUST_200601_900_NS8cuda_cub10par_nosyncE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784576thrust20THRUST_200601_900_NS6system6detail10sequential3seqE[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784576thrust20THRUST_200601_900_NS12placeholders2_1E[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784576thrust20THRUST_200601_900_NS12placeholders2_2E[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784576thrust20THRUST_200601_900_NS12placeholders2_3E[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784576thrust20THRUST_200601_900_NS12placeholders2_4E[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784576thrust20THRUST_200601_900_NS12placeholders2_5E[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784576thrust20THRUST_200601_900_NS12placeholders2_6E[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784576thrust20THRUST_200601_900_NS12placeholders2_7E[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784576thrust20THRUST_200601_900_NS12placeholders2_8E[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784576thrust20THRUST_200601_900_NS12placeholders2_9E[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784576thrust20THRUST_200601_900_NS12placeholders3_10E[1];
.global .align 1 .b8 _ZN38_INTERNAL_0e0ed5f5_8_main2_cu_63e784576thrust20THRUST_200601_900_NS3seqE[1];
.global .align 1 .b8 $str[19] = {95, 95, 67, 85, 68, 65, 95, 65, 82, 67, 72, 95, 95, 58, 32, 37, 100, 10};
.global .align 1 .b8 $str$1[89] = {83, 77, 69, 77, 95, 72, 69, 73, 71, 72, 84, 32, 42, 32, 83, 77, 69, 77, 95, 87, 73, 68, 84, 72, 32, 37, 32, 98, 108, 111, 99, 107, 68, 105, 109, 46, 120, 32, 61, 61, 32, 48, 32, 38, 38, 32, 34, 83, 77, 69, 77, 32, 115, 105, 122, 101, 32, 105, 115, 32, 110, 111, 116, 32, 100, 105, 118, 105, 115, 105, 98, 108, 101, 32, 98, 121, 32, 98, 108, 111, 99, 107, 68, 105, 109, 46, 120, 34};
.global .align 1 .b8 $str$2[9] = {109, 97, 105, 110, 50, 46, 99, 117};
.global .align 1 .b8 $str$3[52] = {91, 116, 109, 97, 95, 107, 101, 114, 110, 101, 108, 93, 32, 116, 104, 114, 101, 97, 100, 73, 100, 120, 46, 120, 32, 37, 100, 32, 115, 116, 97, 114, 116, 115, 59, 32, 116, 101, 110, 115, 111, 114, 95, 109, 97, 112, 58, 32, 37, 112, 10};
.global .align 1 .b8 $str$4[56] = {91, 116, 109, 97, 95, 107, 101, 114, 110, 101, 108, 93, 32, 116, 104, 114, 101, 97, 100, 73, 100, 120, 46, 120, 32, 37, 100, 32, 105, 110, 105, 116, 105, 97, 116, 101, 115, 32, 98, 117, 108, 107, 32, 116, 101, 110, 115, 111, 114, 32, 99, 111, 112, 121, 10};
.global .align 1 .b8 $str$5[37] = {91, 116, 109, 97, 95, 107, 101, 114, 110, 101, 108, 93, 32, 116, 104, 114, 101, 97, 100, 73, 100, 120, 46, 120, 32, 37, 100, 32, 97, 114, 114, 105, 118, 101, 100, 10};

.visible .entry _Z10tma_kernelILi32ELi32EiEv14CUtensorMap_stii(
	.param .align 64 .b8 _Z10tma_kernelILi32ELi32EiEv14CUtensorMap_stii_param_0[128],
	.param .u32 _Z10tma_kernelILi32ELi32EiEv14CUtensorMap_stii_param_1,
	.param .u32 _Z10tma_kernelILi32ELi32EiEv14CUtensorMap_stii_param_2
)
{
	.local .align 16 .b8 	__local_depot0[16];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<16>;
	.reg .b32 	%r<68>;
	.reg .b64 	%rd<45>;
	// demoted variable
	.shared .align 128 .b8 _ZZ10tma_kernelILi32ELi32EiEv14CUtensorMap_stiiE11smem_buffer[4096];
	// demoted variable
	.shared .align 8 .b8 _ZZ10tma_kernelILi32ELi32EiEv14CUtensorMap_stiiE3bar[8];

	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	mov.b64 	%rd8, _Z10tma_kernelILi32ELi32EiEv14CUtensorMap_stii_param_0;
	ld.param.u32 	%r20, [_Z10tma_kernelILi32ELi32EiEv14CUtensorMap_stii_param_1];
	ld.param.u32 	%r21, [_Z10tma_kernelILi32ELi32EiEv14CUtensorMap_stii_param_2];
	add.u64 	%rd9, %SP, 0;
	add.u64 	%rd1, %SPL, 0;
	mov.u32 	%r1, %tid.x;
	setp.ne.s32 	%p1, %r1, 0;
	@%p1 bra 	$L__BB0_2;

	mov.u32 	%r22, 900;
	st.local.u32 	[%rd1], %r22;
	mov.u64 	%rd10, $str;
	cvta.global.u64 	%rd11, %rd10;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd9;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r23, [retval0+0];
	} // callseq 0

$L__BB0_2:
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r24, 1024;
	rem.u32 	%r25, %r24, %r2;
	setp.eq.s32 	%p2, %r25, 0;
	@%p2 bra 	$L__BB0_4;

	mov.u64 	%rd13, $str$1;
	cvta.global.u64 	%rd14, %rd13;
	mov.u64 	%rd15, $str$2;
	cvta.global.u64 	%rd16, %rd15;
	mov.u64 	%rd17, __unnamed_1;
	cvta.global.u64 	%rd18, %rd17;
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd14;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd16;
	.param .b32 param2;
	st.param.b32 	[param2+0], 101;
	.param .b64 param3;
	st.param.b64 	[param3+0], %rd18;
	.param .b64 param4;
	st.param.b64 	[param4+0], 1;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 1

$L__BB0_4:
	st.local.u32 	[%rd1], %r1;
	cvta.param.u64 	%rd2, %rd8;
	st.local.u64 	[%rd1+8], %rd2;
	mov.u64 	%rd20, $str$3;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd9;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r26, [retval0+0];
	} // callseq 2
	@%p1 bra 	$L__BB0_6;

	mov.u32 	%r27, _ZZ10tma_kernelILi32ELi32EiEv14CUtensorMap_stiiE3bar;
	// begin inline asm
	mbarrier.init.shared.b64 [%r27], %r2;
	// end inline asm
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm

$L__BB0_6:
	setp.eq.s32 	%p4, %r1, 0;
	bar.sync 	0;
	@%p4 bra 	$L__BB0_8;

	mov.u32 	%r29, _ZZ10tma_kernelILi32ELi32EiEv14CUtensorMap_stiiE3bar;
	mov.u32 	%r30, 1;
	// begin inline asm
	mbarrier.arrive.shared::cta.b64                             %rd44,  [%r29], %r30;    // 2. 
	// end inline asm
	bra.uni 	$L__BB0_9;

$L__BB0_8:
	mov.u32 	%r35, 0;
	st.local.u32 	[%rd1], %r35;
	mov.u64 	%rd28, $str$4;
	cvta.global.u64 	%rd29, %rd28;
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd29;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd9;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r36, [retval0+0];
	} // callseq 3
	mov.u32 	%r37, _ZZ10tma_kernelILi32ELi32EiEv14CUtensorMap_stiiE11smem_buffer;
	{ .reg .b64 %tmp;
	  cvt.u64.u32 	%tmp, %r37;
	  cvta.shared.u64 	%rd24, %tmp; }
	mov.u32 	%r33, _ZZ10tma_kernelILi32ELi32EiEv14CUtensorMap_stiiE3bar;
	{ .reg .b64 %tmp;
	  cvt.u64.u32 	%tmp, %r33;
	  cvta.shared.u64 	%rd26, %tmp; }
	// begin inline asm
	cp.async.bulk.tensor.2d.shared::cluster.global.tile.mbarrier::complete_tx::bytes [%rd24], [%rd2, {%r20, %r21}], [%rd26];
	// end inline asm
	mov.u32 	%r34, 4096;
	// begin inline asm
	mbarrier.arrive.expect_tx.release.cta.shared::cta.b64 %rd44, [%r33], %r34; // 8. 
	// end inline asm

$L__BB0_9:
	// begin inline asm
	mov.u64 %rd31, %globaltimer;
	// end inline asm
	mov.u32 	%r39, _ZZ10tma_kernelILi32ELi32EiEv14CUtensorMap_stiiE3bar;
	// begin inline asm
	{
	.reg .pred p;
	mbarrier.try_wait.shared.b64 p, [%r39], %rd44;
	selp.b32 %r38, 1, 0, p;
	}
	// end inline asm
	setp.ne.s32 	%p5, %r38, 0;
	@%p5 bra 	$L__BB0_18;

	mov.u32 	%r62, 0;

$L__BB0_11:
	setp.lt.s32 	%p6, %r62, 16;
	@%p6 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_12;

$L__BB0_16:
	add.s32 	%r62, %r62, 1;
	bra.uni 	$L__BB0_17;

$L__BB0_12:
	// begin inline asm
	mov.u64 %rd33, %globaltimer;
	// end inline asm
	sub.s64 	%rd7, %rd33, %rd31;
	setp.lt.s64 	%p7, %rd7, 4000000;
	@%p7 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_13;

$L__BB0_14:
	setp.lt.s64 	%p8, %rd7, 40000;
	@%p8 bra 	$L__BB0_17;

	shr.s64 	%rd34, %rd7, 63;
	shr.u64 	%rd35, %rd34, 62;
	add.s64 	%rd36, %rd7, %rd35;
	shr.u64 	%rd37, %rd36, 2;
	cvt.u32.u64 	%r42, %rd37;
	// begin inline asm
	nanosleep.u32 %r42;
	// end inline asm
	bra.uni 	$L__BB0_17;

$L__BB0_13:
	mov.u32 	%r41, 1000000;
	// begin inline asm
	nanosleep.u32 %r41;
	// end inline asm

$L__BB0_17:
	// begin inline asm
	{
	.reg .pred p;
	mbarrier.try_wait.shared.b64 p, [%r39], %rd44;
	selp.b32 %r43, 1, 0, p;
	}
	// end inline asm
	setp.eq.s32 	%p9, %r43, 0;
	@%p9 bra 	$L__BB0_11;

$L__BB0_18:
	st.local.u32 	[%rd1], %r1;
	mov.u64 	%rd39, $str$5;
	cvta.global.u64 	%rd40, %rd39;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd40;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd9;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r45, [retval0+0];
	} // callseq 4
	mov.u32 	%r46, 1024;
	div.u32 	%r6, %r46, %r2;
	setp.lt.s32 	%p10, %r6, 1;
	@%p10 bra 	$L__BB0_25;

	add.s32 	%r7, %r1, %r21;
	mul.lo.s32 	%r8, %r6, %r1;
	and.b32  	%r67, %r6, 3;
	add.s32 	%r48, %r6, -1;
	setp.lt.u32 	%p11, %r48, 3;
	mov.u32 	%r65, 0;
	@%p11 bra 	$L__BB0_22;

	sub.s32 	%r64, %r6, %r67;
	mov.u32 	%r65, 0;

$L__BB0_21:
	add.s32 	%r50, %r65, %r8;
	shl.b32 	%r51, %r50, 2;
	mov.u32 	%r52, _ZZ10tma_kernelILi32ELi32EiEv14CUtensorMap_stiiE11smem_buffer;
	add.s32 	%r53, %r52, %r51;
	st.shared.u32 	[%r53], %r7;
	st.shared.u32 	[%r53+4], %r7;
	st.shared.u32 	[%r53+8], %r7;
	st.shared.u32 	[%r53+12], %r7;
	add.s32 	%r65, %r65, 4;
	add.s32 	%r64, %r64, -4;
	setp.ne.s32 	%p12, %r64, 0;
	@%p12 bra 	$L__BB0_21;

$L__BB0_22:
	setp.eq.s32 	%p13, %r67, 0;
	@%p13 bra 	$L__BB0_25;

	mov.u32 	%r56, _ZZ10tma_kernelILi32ELi32EiEv14CUtensorMap_stiiE11smem_buffer;

$L__BB0_24:
	.pragma "nounroll";
	add.s32 	%r54, %r65, %r8;
	shl.b32 	%r55, %r54, 2;
	add.s32 	%r57, %r56, %r55;
	st.shared.u32 	[%r57], %r7;
	add.s32 	%r65, %r65, 1;
	add.s32 	%r67, %r67, -1;
	setp.ne.s32 	%p14, %r67, 0;
	@%p14 bra 	$L__BB0_24;

$L__BB0_25:
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	@%p1 bra 	$L__BB0_27;

	mov.u32 	%r60, _ZZ10tma_kernelILi32ELi32EiEv14CUtensorMap_stiiE11smem_buffer;
	{ .reg .b64 %tmp;
	  cvt.u64.u32 	%tmp, %r60;
	  cvta.shared.u64 	%rd43, %tmp; }
	// begin inline asm
	cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [%rd2, {%r20, %r21}], [%rd43];
	// end inline asm
	// begin inline asm
	cp.async.bulk.commit_group;
	// end inline asm
	// begin inline asm
	cp.async.bulk.wait_group.read 0;
	// end inline asm

$L__BB0_27:
	ret;

}
	// .globl	_ZN3cub17CUB_200601_900_NS11EmptyKernelIvEEvv
.visible .entry _ZN3cub17CUB_200601_900_NS11EmptyKernelIvEEvv()
{



	ret;

}

