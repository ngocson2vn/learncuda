
#include <cuda_runtime.h>
#include <stdio.h>

int const n = 511;

__global__ void testKernel(int n, float* p0, float* p1, float* p2, float* p3, float* p4, float* p5, float* p6, float* p7, float* p8, float* p9, float* p10, float* p11, float* p12, float* p13, float* p14, float* p15, float* p16, float* p17, float* p18, float* p19, float* p20, float* p21, float* p22, float* p23, float* p24, float* p25, float* p26, float* p27, float* p28, float* p29, float* p30, float* p31, float* p32, float* p33, float* p34, float* p35, float* p36, float* p37, float* p38, float* p39, float* p40, float* p41, float* p42, float* p43, float* p44, float* p45, float* p46, float* p47, float* p48, float* p49, float* p50, float* p51, float* p52, float* p53, float* p54, float* p55, float* p56, float* p57, float* p58, float* p59, float* p60, float* p61, float* p62, float* p63, float* p64, float* p65, float* p66, float* p67, float* p68, float* p69, float* p70, float* p71, float* p72, float* p73, float* p74, float* p75, float* p76, float* p77, float* p78, float* p79, float* p80, float* p81, float* p82, float* p83, float* p84, float* p85, float* p86, float* p87, float* p88, float* p89, float* p90, float* p91, float* p92, float* p93, float* p94, float* p95, float* p96, float* p97, float* p98, float* p99, float* p100, float* p101, float* p102, float* p103, float* p104, float* p105, float* p106, float* p107, float* p108, float* p109, float* p110, float* p111, float* p112, float* p113, float* p114, float* p115, float* p116, float* p117, float* p118, float* p119, float* p120, float* p121, float* p122, float* p123, float* p124, float* p125, float* p126, float* p127, float* p128, float* p129, float* p130, float* p131, float* p132, float* p133, float* p134, float* p135, float* p136, float* p137, float* p138, float* p139, float* p140, float* p141, float* p142, float* p143, float* p144, float* p145, float* p146, float* p147, float* p148, float* p149, float* p150, float* p151, float* p152, float* p153, float* p154, float* p155, float* p156, float* p157, float* p158, float* p159, float* p160, float* p161, float* p162, float* p163, float* p164, float* p165, float* p166, float* p167, float* p168, float* p169, float* p170, float* p171, float* p172, float* p173, float* p174, float* p175, float* p176, float* p177, float* p178, float* p179, float* p180, float* p181, float* p182, float* p183, float* p184, float* p185, float* p186, float* p187, float* p188, float* p189, float* p190, float* p191, float* p192, float* p193, float* p194, float* p195, float* p196, float* p197, float* p198, float* p199, float* p200, float* p201, float* p202, float* p203, float* p204, float* p205, float* p206, float* p207, float* p208, float* p209, float* p210, float* p211, float* p212, float* p213, float* p214, float* p215, float* p216, float* p217, float* p218, float* p219, float* p220, float* p221, float* p222, float* p223, float* p224, float* p225, float* p226, float* p227, float* p228, float* p229, float* p230, float* p231, float* p232, float* p233, float* p234, float* p235, float* p236, float* p237, float* p238, float* p239, float* p240, float* p241, float* p242, float* p243, float* p244, float* p245, float* p246, float* p247, float* p248, float* p249, float* p250, float* p251, float* p252, float* p253, float* p254, float* p255, float* p256, float* p257, float* p258, float* p259, float* p260, float* p261, float* p262, float* p263, float* p264, float* p265, float* p266, float* p267, float* p268, float* p269, float* p270, float* p271, float* p272, float* p273, float* p274, float* p275, float* p276, float* p277, float* p278, float* p279, float* p280, float* p281, float* p282, float* p283, float* p284, float* p285, float* p286, float* p287, float* p288, float* p289, float* p290, float* p291, float* p292, float* p293, float* p294, float* p295, float* p296, float* p297, float* p298, float* p299, float* p300, float* p301, float* p302, float* p303, float* p304, float* p305, float* p306, float* p307, float* p308, float* p309, float* p310, float* p311, float* p312, float* p313, float* p314, float* p315, float* p316, float* p317, float* p318, float* p319, float* p320, float* p321, float* p322, float* p323, float* p324, float* p325, float* p326, float* p327, float* p328, float* p329, float* p330, float* p331, float* p332, float* p333, float* p334, float* p335, float* p336, float* p337, float* p338, float* p339, float* p340, float* p341, float* p342, float* p343, float* p344, float* p345, float* p346, float* p347, float* p348, float* p349, float* p350, float* p351, float* p352, float* p353, float* p354, float* p355, float* p356, float* p357, float* p358, float* p359, float* p360, float* p361, float* p362, float* p363, float* p364, float* p365, float* p366, float* p367, float* p368, float* p369, float* p370, float* p371, float* p372, float* p373, float* p374, float* p375, float* p376, float* p377, float* p378, float* p379, float* p380, float* p381, float* p382, float* p383, float* p384, float* p385, float* p386, float* p387, float* p388, float* p389, float* p390, float* p391, float* p392, float* p393, float* p394, float* p395, float* p396, float* p397, float* p398, float* p399, float* p400, float* p401, float* p402, float* p403, float* p404, float* p405, float* p406, float* p407, float* p408, float* p409, float* p410, float* p411, float* p412, float* p413, float* p414, float* p415, float* p416, float* p417, float* p418, float* p419, float* p420, float* p421, float* p422, float* p423, float* p424, float* p425, float* p426, float* p427, float* p428, float* p429, float* p430, float* p431, float* p432, float* p433, float* p434, float* p435, float* p436, float* p437, float* p438, float* p439, float* p440, float* p441, float* p442, float* p443, float* p444, float* p445, float* p446, float* p447, float* p448, float* p449, float* p450, float* p451, float* p452, float* p453, float* p454, float* p455, float* p456, float* p457, float* p458, float* p459, float* p460, float* p461, float* p462, float* p463, float* p464, float* p465, float* p466, float* p467, float* p468, float* p469, float* p470, float* p471, float* p472, float* p473, float* p474, float* p475, float* p476, float* p477, float* p478, float* p479, float* p480, float* p481, float* p482, float* p483, float* p484, float* p485, float* p486, float* p487, float* p488, float* p489, float* p490, float* p491, float* p492, float* p493, float* p494, float* p495, float* p496, float* p497, float* p498, float* p499, float* p500, float* p501, float* p502, float* p503, float* p504, float* p505, float* p506, float* p507, float* p508, float* p509, float* p510) {
  // Dummy kernel
  printf("testKernel with params size %d bytes\n", n);
}

void launch_test_kernel(float* params[n]) {
  testKernel<<<1, 1>>>(n, params[0], params[1], params[2], params[3], params[4], params[5], params[6], params[7], params[8], params[9], params[10], params[11], params[12], params[13], params[14], params[15], params[16], params[17], params[18], params[19], params[20], params[21], params[22], params[23], params[24], params[25], params[26], params[27], params[28], params[29], params[30], params[31], params[32], params[33], params[34], params[35], params[36], params[37], params[38], params[39], params[40], params[41], params[42], params[43], params[44], params[45], params[46], params[47], params[48], params[49], params[50], params[51], params[52], params[53], params[54], params[55], params[56], params[57], params[58], params[59], params[60], params[61], params[62], params[63], params[64], params[65], params[66], params[67], params[68], params[69], params[70], params[71], params[72], params[73], params[74], params[75], params[76], params[77], params[78], params[79], params[80], params[81], params[82], params[83], params[84], params[85], params[86], params[87], params[88], params[89], params[90], params[91], params[92], params[93], params[94], params[95], params[96], params[97], params[98], params[99], params[100], params[101], params[102], params[103], params[104], params[105], params[106], params[107], params[108], params[109], params[110], params[111], params[112], params[113], params[114], params[115], params[116], params[117], params[118], params[119], params[120], params[121], params[122], params[123], params[124], params[125], params[126], params[127], params[128], params[129], params[130], params[131], params[132], params[133], params[134], params[135], params[136], params[137], params[138], params[139], params[140], params[141], params[142], params[143], params[144], params[145], params[146], params[147], params[148], params[149], params[150], params[151], params[152], params[153], params[154], params[155], params[156], params[157], params[158], params[159], params[160], params[161], params[162], params[163], params[164], params[165], params[166], params[167], params[168], params[169], params[170], params[171], params[172], params[173], params[174], params[175], params[176], params[177], params[178], params[179], params[180], params[181], params[182], params[183], params[184], params[185], params[186], params[187], params[188], params[189], params[190], params[191], params[192], params[193], params[194], params[195], params[196], params[197], params[198], params[199], params[200], params[201], params[202], params[203], params[204], params[205], params[206], params[207], params[208], params[209], params[210], params[211], params[212], params[213], params[214], params[215], params[216], params[217], params[218], params[219], params[220], params[221], params[222], params[223], params[224], params[225], params[226], params[227], params[228], params[229], params[230], params[231], params[232], params[233], params[234], params[235], params[236], params[237], params[238], params[239], params[240], params[241], params[242], params[243], params[244], params[245], params[246], params[247], params[248], params[249], params[250], params[251], params[252], params[253], params[254], params[255], params[256], params[257], params[258], params[259], params[260], params[261], params[262], params[263], params[264], params[265], params[266], params[267], params[268], params[269], params[270], params[271], params[272], params[273], params[274], params[275], params[276], params[277], params[278], params[279], params[280], params[281], params[282], params[283], params[284], params[285], params[286], params[287], params[288], params[289], params[290], params[291], params[292], params[293], params[294], params[295], params[296], params[297], params[298], params[299], params[300], params[301], params[302], params[303], params[304], params[305], params[306], params[307], params[308], params[309], params[310], params[311], params[312], params[313], params[314], params[315], params[316], params[317], params[318], params[319], params[320], params[321], params[322], params[323], params[324], params[325], params[326], params[327], params[328], params[329], params[330], params[331], params[332], params[333], params[334], params[335], params[336], params[337], params[338], params[339], params[340], params[341], params[342], params[343], params[344], params[345], params[346], params[347], params[348], params[349], params[350], params[351], params[352], params[353], params[354], params[355], params[356], params[357], params[358], params[359], params[360], params[361], params[362], params[363], params[364], params[365], params[366], params[367], params[368], params[369], params[370], params[371], params[372], params[373], params[374], params[375], params[376], params[377], params[378], params[379], params[380], params[381], params[382], params[383], params[384], params[385], params[386], params[387], params[388], params[389], params[390], params[391], params[392], params[393], params[394], params[395], params[396], params[397], params[398], params[399], params[400], params[401], params[402], params[403], params[404], params[405], params[406], params[407], params[408], params[409], params[410], params[411], params[412], params[413], params[414], params[415], params[416], params[417], params[418], params[419], params[420], params[421], params[422], params[423], params[424], params[425], params[426], params[427], params[428], params[429], params[430], params[431], params[432], params[433], params[434], params[435], params[436], params[437], params[438], params[439], params[440], params[441], params[442], params[443], params[444], params[445], params[446], params[447], params[448], params[449], params[450], params[451], params[452], params[453], params[454], params[455], params[456], params[457], params[458], params[459], params[460], params[461], params[462], params[463], params[464], params[465], params[466], params[467], params[468], params[469], params[470], params[471], params[472], params[473], params[474], params[475], params[476], params[477], params[478], params[479], params[480], params[481], params[482], params[483], params[484], params[485], params[486], params[487], params[488], params[489], params[490], params[491], params[492], params[493], params[494], params[495], params[496], params[497], params[498], params[499], params[500], params[501], params[502], params[503], params[504], params[505], params[506], params[507], params[508], params[509], params[510]);
}

int main() {
  cudaError_t err;

  // Transfer data from host to device
  float* params[n];
  const int m = 10;
  for (int i = 0; i < n; i++) {
    float* p = new float[m];
    for (int j = 0; j < m; j++) {
      p[j] = 1.0 * j;
    }

    float* d_p;
    cudaMalloc((void**)&d_p, m * sizeof(float));
    cudaMemcpyAsync(d_p, p, m * sizeof(float), cudaMemcpyHostToDevice);
    params[i] = d_p;
  }

  launch_test_kernel(params);
  cudaDeviceSynchronize();
  err = cudaGetLastError();
  if (err != cudaSuccess) {
      printf("Failed at %d bytes: %s\n", n, cudaGetErrorString(err));
  } else {
      printf("%d bytes succeeded\n", n);
  }
  return 0;
}
